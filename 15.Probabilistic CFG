import nltk

# Define a probabilistic context-free grammar
pcfg_grammar = nltk.PCFG.fromstring("""
    S -> NP VP [1.0]
    NP -> Det N [0.6] | Pronoun [0.4]
    VP -> V NP [0.7] | VP PP [0.3]
    PP -> P NP [1.0]
    Det -> 'the' [0.8] | 'a' [0.2]
    N -> 'dog' [0.4] | 'cat' [0.4] | 'ball' [0.2]
    Pronoun -> 'I' [0.5] | 'you' [0.5]
    V -> 'chased' [0.6] | 'saw' [0.4]
    P -> 'with' [0.4] | 'in' [0.3] | 'on' [0.3]
""")

# Create a PCFG parser
parser = nltk.ChartParser(pcfg_grammar)

# Parse a sentence probabilistically
def parse_sentence(sentence):
    words = sentence.split()
    trees = parser.parse(words)
    for tree in trees:
        return tree

# Example usage
sentence = "the dog chased the cat"
parsed_tree = parse_sentence(sentence)

# Print the most likely parse tree
print(parsed_tree)
