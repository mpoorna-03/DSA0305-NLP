from pyparsing import Word, alphas, infixNotation, opAssoc, Keyword


variable = Word(alphas, max=1)
predicate = Word(alphas, alphas + '0123456789_')


and_operator = Keyword("and")
or_operator = Keyword("or")
not_operator = Keyword("not")


expr = infixNotation(
    variable | predicate,
    [
        (not_operator, 1, opAssoc.RIGHT, lambda tokens: ('not', tokens[0])),
        (and_operator, 2, opAssoc.LEFT, lambda tokens: ('and', tokens[0][0], tokens[1])),
        (or_operator, 2, opAssoc.LEFT, lambda tokens: ('or', tokens[0][0], tokens[1])),
    ]
)


def parse_fopc(expression):
    return expr.parseString(expression).asList()[0]


if __name__ == "__main__":
    expressions = ["x and y", "x or (not y)"]

    for expression in expressions:
        parsed_expression = parse_fopc(expression)
        print(f"Parsed expression for '{expression}':", parsed_expression)
