class EarleyParser:
    def __init__(self, grammar):
        self.grammar = grammar

    def parse(self, input_str):
        chart = [[] for _ in range(len(input_str) + 1)]
        self.predict(0, chart)

        for i in range(len(input_str) + 1):
            self.scan(i, input_str, chart)

            j = 0
            while j < len(chart[i]):
                self.complete(i, j, chart)
                j += 1

        return chart

    def predict(self, i, chart):
        for production in self.grammar:
            non_terminal = production[0]
            if non_terminal == production[1]:  # Handle epsilon production
                chart[i].append((non_terminal, tuple(), 0, i))

            chart[i].extend((non_terminal, production[1:], 0, i) for production in self.grammar if production[0] == non_terminal)

    def scan(self, i, input_str, chart):
        if i < len(input_str):
            for item in chart[i]:
                if item[2] < len(item[1]) and item[1][item[2]] == input_str[i]:
                    chart[i + 1].append((item[0], item[1], item[2] + 1, item[3]))

    def complete(self, i, j, chart):
        for item in chart[j]:
            if item[2] < len(item[1]) and item[1][item[2]] == chart[j].index(item):
                chart[i].append((item[0], item[1], item[2] + 1, item[3]))

# Example Usage:
grammar = [
    ('S', ['NP', 'VP']),
    ('NP', ['Det', 'N']),
    ('VP', ['V', 'NP']),
    ('Det', ['the']),
    ('N', ['cat', 'dog']),
    ('V', ['chased', 'ate'])
]

earley_parser = EarleyParser(grammar)
input_string = "the cat chased the dog"
result_chart = earley_parser.parse(input_string)

# Print the resulting chart
for i, chart in enumerate(result_chart):
    print(f"Chart {i}: {chart}")
